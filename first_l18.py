# -*- coding: utf-8 -*-
"""First_L18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/168DcmIZII5O-7bqCVcFCiZH6aPu7m5zv
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt

df=pd.read_csv('Data1.csv')

"""# New Section"""

#df.info
df.head(5)
df.sample(5)

df.drop('customerID',axis='columns',inplace=True)

df.head(5)

df.dtypes

df.TotalCharges.values

pd.to_numeric(df.TotalCharges)

#pd.to_numeric(df.TotalCharges,errors='coerce').isnull() {to check blank coulmn}

df[pd.to_numeric(df.TotalCharges,errors='coerce').isnull()]

df.shape

df1=df[df.TotalCharges!=' ']

df1.shape

df1.TotalCharges=pd.to_numeric(df1.TotalCharges)

df1.dtypes

#df1[df1.Churn=='No']

tenure_churn_no=df1[df1.Churn=='No'].tenure

tenure_churn_yes=df1[df1.Churn=='Yes'].tenure

plt.hist([tenure_churn_yes,tenure_churn_no],color=['Green','Red'],label=['Churn_yes','Churn_No'])
plt.legend()
plt.xlabel('Tenure')
plt.ylabel('Number of Customer')
plt.title('Customer Churn Prediction Visualization')

monthly_churn_no=df1[df1.Churn=='No'].MonthlyCharges

monthly_churn_yes=df1[df1.Churn=='Yes'].MonthlyCharges

plt.hist([monthly_churn_yes,monthly_churn_no],color=['green','red'],label=['Churn-Yes','Churn-No'])
plt.legend()
plt.xlabel('Monthly_Churn')
plt.ylabel('Number of Customer')
plt.title('Customer Churn Prediction')

#for column in df:
 # print(f'{column}: df{[column].unique()}')

def print_unique_col_values(df):
  for column in df.columns:
    if df[column].dtypes=='object':
      print(f'{column} : {df[column].unique()}')

print_unique_col_values(df1)

df1.replace('No phone service', 'No', inplace=True)
df1.replace('No internet service', 'No', inplace=True)
#df['Column_Name'] = df['Column_Name'].replace({'Old_Value': 'New_Value'})

#print_unique_col_values(df1)
print_unique_col_values(df1)

yes_no_columns={'Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup',
                'DeviceProtection','TechSupport','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn'}

for col in yes_no_columns:
  #print(f'{col} : {df[col].unique()}')
  df1[col].replace({'Yes' : 1,'No' : 0}, inplace=True)

for col in df1:
  print(f'{col} : {df1[col].unique()}')

df1['gender'].replace({'Female' : 0,'Male' : 1}, inplace=True)
df1['gender'].unique()

df2=pd.get_dummies(data=df1,columns=['InternetService','Contract','PaymentMethod'])
df2.columns

df2.sample(4)

df2.dtypes

cols_to_scale=['tenure','MonthlyCharges','TotalCharges']

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
df2[cols_to_scale]=scaler.fit_transform(df2[cols_to_scale])

df2.sample(15)

for col in df2:
  print(f'{col} : {df2[col].unique()}')

x=df2.drop('Churn',axis='columns')
y=df2['Churn']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=5)

#x_train.shape
#x_test.shape
x_train[:10]

import tensorflow as tf
from tensorflow import keras

model = keras.Sequential([
    keras.layers.Dense(20,input_shape=(26,),activation='relu'),
    keras.layers.Dense(1,activation='sigmoid'),
])
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])
model.fit(x_train,y_train,epochs=15)

model.evaluate(x_test,y_test)

yp=model.predict(x_test)
yp[:5]

y_test[:5]

y_pred=[]
for element in yp:
  if element > 0.5:
    y_pred.append(1)
  else:
    y_pred.append(0)

y_pred[:10]

!pip install matplotlib-venn

from sklearn.metrics import confusion_matrix, classification_report
print(classification_report(y_test,y_pred))

import seaborn as sn
cm = tf.math.confusion_matrix(labels=y_test,predictions=y_pred)
plt.figure(figsize=(10,7))
sn.heatmap(cm, annot=True,fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')

##Accuracy

"""##Accuracy

"""

round((862+229)/(862+229+137+179),2)

"""# Precision"""

round(884/(884+172),2)

round(236/(236+115),2)

"""Recall for 0"""

round(884/(884+115),2)

#recall for 1
round(236/(172+236),2)



